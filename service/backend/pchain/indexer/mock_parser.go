// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanche-rosetta/service/backend/pchain/indexer (interfaces: Parser)
//
// Generated by this command:
//
//	mockgen -package=indexer -destination=service/backend/pchain/indexer/mock_parser.go github.com/ava-labs/avalanche-rosetta/service/backend/pchain/indexer Parser
//

// Package indexer is a generated GoMock package.
package indexer

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockParser is a mock of Parser interface.
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser.
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance.
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// GetGenesisBlock mocks base method.
func (m *MockParser) GetGenesisBlock(arg0 context.Context) (*ParsedGenesisBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenesisBlock", arg0)
	ret0, _ := ret[0].(*ParsedGenesisBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenesisBlock indicates an expected call of GetGenesisBlock.
func (mr *MockParserMockRecorder) GetGenesisBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenesisBlock", reflect.TypeOf((*MockParser)(nil).GetGenesisBlock), arg0)
}

// GetPlatformHeight mocks base method.
func (m *MockParser) GetPlatformHeight(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformHeight", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformHeight indicates an expected call of GetPlatformHeight.
func (mr *MockParserMockRecorder) GetPlatformHeight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformHeight", reflect.TypeOf((*MockParser)(nil).GetPlatformHeight), arg0)
}

// ParseCurrentBlock mocks base method.
func (m *MockParser) ParseCurrentBlock(arg0 context.Context) (*ParsedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseCurrentBlock", arg0)
	ret0, _ := ret[0].(*ParsedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseCurrentBlock indicates an expected call of ParseCurrentBlock.
func (mr *MockParserMockRecorder) ParseCurrentBlock(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseCurrentBlock", reflect.TypeOf((*MockParser)(nil).ParseCurrentBlock), arg0)
}

// ParseNonGenesisBlock mocks base method.
func (m *MockParser) ParseNonGenesisBlock(arg0 context.Context, arg1 string, arg2 uint64) (*ParsedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseNonGenesisBlock", arg0, arg1, arg2)
	ret0, _ := ret[0].(*ParsedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseNonGenesisBlock indicates an expected call of ParseNonGenesisBlock.
func (mr *MockParserMockRecorder) ParseNonGenesisBlock(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseNonGenesisBlock", reflect.TypeOf((*MockParser)(nil).ParseNonGenesisBlock), arg0, arg1, arg2)
}
