package service

import (
	"errors"
	"fmt"
	"testing"

	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/stretchr/testify/assert"
)

func TestConstruction_ContractCallData(t *testing.T) {
	tests := map[string]struct {
		methodSig  string
		methodArgs interface{}

		expectedResponse string
		expectedError    error
	}{
		"happy path: nil args": {
			methodSig:        "deposit()",
			methodArgs:       nil,
			expectedResponse: "0xd0e30db0",
		},
		"happy path: single string arg": {
			methodSig:        "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
			methodArgs:       "0x00000000000000000000000000000000000000000000000000000000000000201cdb5651ea836ecc9be70d044e2cf7a416e5257ec8d954deb9d09a66a8264b8e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000026c58c5095c8fac99e518ee951ba8f56d3c75e8e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001",
			expectedResponse: "0xf17325e700000000000000000000000000000000000000000000000000000000000000201cdb5651ea836ecc9be70d044e2cf7a416e5257ec8d954deb9d09a66a8264b8e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000026c58c5095c8fac99e518ee951ba8f56d3c75e8e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001",
		},
		"happy path: list of string args": {
			methodSig:        "register(string,address,bool)",
			methodArgs:       []string{"bool abc", "0x0000000000000000000000000000000000000000", "true"},
			expectedResponse: "0x60d7a2780000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008626f6f6c20616263000000000000000000000000000000000000000000000000",
		},
		"happy path: list of non string args": {
			methodSig:        "register(string,address,bool)",
			methodArgs:       []interface{}{"bool abc", "0x0000000000000000000000000000000000000000", "true"},
			expectedResponse: "0x60d7a2780000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008626f6f6c20616263000000000000000000000000000000000000000000000000",
		},
		"error: case string: invalid method args hex data": {
			methodSig:     "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))",
			methodArgs:    "!!!",
			expectedError: errors.New("error decoding method args hex data: encoding/hex: invalid byte: U+0021 '!'"),
		},
		"error: case []interface: ": {
			methodSig:     "register(string,address,bool)",
			methodArgs:    []interface{}{"bool abc", "0x0000000000000000000000000000000000000000", true},
			expectedError: errors.New("invalid method_args type at index 2: bool (must be a string)"),
		},
	}

	for name, test := range tests {
		t.Run(name, func(t *testing.T) {
			bytes, err := constructContractCallDataGeneric(test.methodSig, test.methodArgs)
			if err != nil {
				fmt.Println(err)
				assert.EqualError(t, err, test.expectedError.Error())
			} else {
				assert.Equal(t, test.expectedResponse, hexutil.Encode(bytes))
			}
		})
	}
}
