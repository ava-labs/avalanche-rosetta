// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/avalanche-rosetta/service (interfaces: AccountBackend,ConstructionBackend)
//
// Generated by this command:
//
//	mockgen -package=service -destination=service/mock_service.go github.com/ava-labs/avalanche-rosetta/service AccountBackend,ConstructionBackend
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	types "github.com/coinbase/rosetta-sdk-go/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountBackend is a mock of AccountBackend interface.
type MockAccountBackend struct {
	ctrl     *gomock.Controller
	recorder *MockAccountBackendMockRecorder
}

// MockAccountBackendMockRecorder is the mock recorder for MockAccountBackend.
type MockAccountBackendMockRecorder struct {
	mock *MockAccountBackend
}

// NewMockAccountBackend creates a new mock instance.
func NewMockAccountBackend(ctrl *gomock.Controller) *MockAccountBackend {
	mock := &MockAccountBackend{ctrl: ctrl}
	mock.recorder = &MockAccountBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountBackend) EXPECT() *MockAccountBackendMockRecorder {
	return m.recorder
}

// AccountBalance mocks base method.
func (m *MockAccountBackend) AccountBalance(arg0 context.Context, arg1 *types.AccountBalanceRequest) (*types.AccountBalanceResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountBalance", arg0, arg1)
	ret0, _ := ret[0].(*types.AccountBalanceResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// AccountBalance indicates an expected call of AccountBalance.
func (mr *MockAccountBackendMockRecorder) AccountBalance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountBalance", reflect.TypeOf((*MockAccountBackend)(nil).AccountBalance), arg0, arg1)
}

// AccountCoins mocks base method.
func (m *MockAccountBackend) AccountCoins(arg0 context.Context, arg1 *types.AccountCoinsRequest) (*types.AccountCoinsResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountCoins", arg0, arg1)
	ret0, _ := ret[0].(*types.AccountCoinsResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// AccountCoins indicates an expected call of AccountCoins.
func (mr *MockAccountBackendMockRecorder) AccountCoins(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountCoins", reflect.TypeOf((*MockAccountBackend)(nil).AccountCoins), arg0, arg1)
}

// ShouldHandleRequest mocks base method.
func (m *MockAccountBackend) ShouldHandleRequest(arg0 any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldHandleRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldHandleRequest indicates an expected call of ShouldHandleRequest.
func (mr *MockAccountBackendMockRecorder) ShouldHandleRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldHandleRequest", reflect.TypeOf((*MockAccountBackend)(nil).ShouldHandleRequest), arg0)
}

// MockConstructionBackend is a mock of ConstructionBackend interface.
type MockConstructionBackend struct {
	ctrl     *gomock.Controller
	recorder *MockConstructionBackendMockRecorder
}

// MockConstructionBackendMockRecorder is the mock recorder for MockConstructionBackend.
type MockConstructionBackendMockRecorder struct {
	mock *MockConstructionBackend
}

// NewMockConstructionBackend creates a new mock instance.
func NewMockConstructionBackend(ctrl *gomock.Controller) *MockConstructionBackend {
	mock := &MockConstructionBackend{ctrl: ctrl}
	mock.recorder = &MockConstructionBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConstructionBackend) EXPECT() *MockConstructionBackendMockRecorder {
	return m.recorder
}

// ConstructionCombine mocks base method.
func (m *MockConstructionBackend) ConstructionCombine(arg0 context.Context, arg1 *types.ConstructionCombineRequest) (*types.ConstructionCombineResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionCombine", arg0, arg1)
	ret0, _ := ret[0].(*types.ConstructionCombineResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionCombine indicates an expected call of ConstructionCombine.
func (mr *MockConstructionBackendMockRecorder) ConstructionCombine(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionCombine", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionCombine), arg0, arg1)
}

// ConstructionDerive mocks base method.
func (m *MockConstructionBackend) ConstructionDerive(arg0 context.Context, arg1 *types.ConstructionDeriveRequest) (*types.ConstructionDeriveResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionDerive", arg0, arg1)
	ret0, _ := ret[0].(*types.ConstructionDeriveResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionDerive indicates an expected call of ConstructionDerive.
func (mr *MockConstructionBackendMockRecorder) ConstructionDerive(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionDerive", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionDerive), arg0, arg1)
}

// ConstructionHash mocks base method.
func (m *MockConstructionBackend) ConstructionHash(arg0 context.Context, arg1 *types.ConstructionHashRequest) (*types.TransactionIdentifierResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionHash", arg0, arg1)
	ret0, _ := ret[0].(*types.TransactionIdentifierResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionHash indicates an expected call of ConstructionHash.
func (mr *MockConstructionBackendMockRecorder) ConstructionHash(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionHash", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionHash), arg0, arg1)
}

// ConstructionMetadata mocks base method.
func (m *MockConstructionBackend) ConstructionMetadata(arg0 context.Context, arg1 *types.ConstructionMetadataRequest) (*types.ConstructionMetadataResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionMetadata", arg0, arg1)
	ret0, _ := ret[0].(*types.ConstructionMetadataResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionMetadata indicates an expected call of ConstructionMetadata.
func (mr *MockConstructionBackendMockRecorder) ConstructionMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionMetadata", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionMetadata), arg0, arg1)
}

// ConstructionParse mocks base method.
func (m *MockConstructionBackend) ConstructionParse(arg0 context.Context, arg1 *types.ConstructionParseRequest) (*types.ConstructionParseResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionParse", arg0, arg1)
	ret0, _ := ret[0].(*types.ConstructionParseResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionParse indicates an expected call of ConstructionParse.
func (mr *MockConstructionBackendMockRecorder) ConstructionParse(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionParse", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionParse), arg0, arg1)
}

// ConstructionPayloads mocks base method.
func (m *MockConstructionBackend) ConstructionPayloads(arg0 context.Context, arg1 *types.ConstructionPayloadsRequest) (*types.ConstructionPayloadsResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionPayloads", arg0, arg1)
	ret0, _ := ret[0].(*types.ConstructionPayloadsResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionPayloads indicates an expected call of ConstructionPayloads.
func (mr *MockConstructionBackendMockRecorder) ConstructionPayloads(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionPayloads", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionPayloads), arg0, arg1)
}

// ConstructionPreprocess mocks base method.
func (m *MockConstructionBackend) ConstructionPreprocess(arg0 context.Context, arg1 *types.ConstructionPreprocessRequest) (*types.ConstructionPreprocessResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionPreprocess", arg0, arg1)
	ret0, _ := ret[0].(*types.ConstructionPreprocessResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionPreprocess indicates an expected call of ConstructionPreprocess.
func (mr *MockConstructionBackendMockRecorder) ConstructionPreprocess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionPreprocess", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionPreprocess), arg0, arg1)
}

// ConstructionSubmit mocks base method.
func (m *MockConstructionBackend) ConstructionSubmit(arg0 context.Context, arg1 *types.ConstructionSubmitRequest) (*types.TransactionIdentifierResponse, *types.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructionSubmit", arg0, arg1)
	ret0, _ := ret[0].(*types.TransactionIdentifierResponse)
	ret1, _ := ret[1].(*types.Error)
	return ret0, ret1
}

// ConstructionSubmit indicates an expected call of ConstructionSubmit.
func (mr *MockConstructionBackendMockRecorder) ConstructionSubmit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructionSubmit", reflect.TypeOf((*MockConstructionBackend)(nil).ConstructionSubmit), arg0, arg1)
}

// ShouldHandleRequest mocks base method.
func (m *MockConstructionBackend) ShouldHandleRequest(arg0 any) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldHandleRequest", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldHandleRequest indicates an expected call of ShouldHandleRequest.
func (mr *MockConstructionBackendMockRecorder) ShouldHandleRequest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldHandleRequest", reflect.TypeOf((*MockConstructionBackend)(nil).ShouldHandleRequest), arg0)
}
