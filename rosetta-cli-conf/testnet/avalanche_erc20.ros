request_funds(1){
  find_account{
    currency = {"symbol":"CAM", "decimals":18};
    // You can get test DAI funds from: https://faucet.paradigm.xyz/
    erc20_currency = {"symbol":"DAI", "decimals":18, "metadata": {"contractAddress": "0xEBbc3452Cc911591e4F18f3b36727Df45d6bd1f9"}};
    random_account = find_balance({
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit":1
    });
  },

  // Create a separate scenario to request funds so that
  // the address we are using to request funds does not
  // get rolled back if funds do not yet exist.
  request{
    loaded_account = find_balance({
      "account_identifier": {{random_account.account_identifier}},
      "minimum_balance":{
        "value": "10000000000000000", // 0.01 CAM
        "currency": {{currency}}
      }
    });
    
    loaded_account2 = find_balance({
      "account_identifier": {{random_account.account_identifier}},
      "minimum_balance":{
        "value": "10000000000000000", // 0.01 DAI
        "currency": {{erc20_currency}}
      }
    });
  }
}

create_account(1){
  create{
    network = {"network":"Columbus", "blockchain":"Camino"};
    key = generate_key({"curve_type": "secp256k1"});
    account = derive({
      "network_identifier": {{network}},
      "public_key": {{key.public_key}}
    });

    // If the account is not saved, the key will be lost!
    save_account({
      "account_identifier": {{account.account_identifier}},
      "keypair": {{key}}
    });
  }
}

simple_transfer_erc20(1){
  transfer{
    transfer.network = {"network":"Columbus", "blockchain":"Camino"};
    cam_currency = {"symbol":"CAM", "decimals":18};

    currency = {"symbol":"DAI", "decimals":18, "metadata": {"contractAddress": "0xEBbc3452Cc911591e4F18f3b36727Df45d6bd1f9"}};
    sender = find_balance({
      "minimum_balance":{
        "value": "10000000000000000", // 0.01 DAI
        "currency": {{currency}}
      }
    });
    unused = find_balance({
      "account_identifier": {{sender.account_identifier}},
      "minimum_balance":{
        "value": "10000000000000000", // 0.01 CAM
        "currency": {{cam_currency}}
      }
    });

    // Set the recipient_amount as some value <= sender.balance-max_fee
    max_fee = "4725000000000000"; // 0.004725 CAM
    available_amount = {{sender.balance.value}} - {{max_fee}};
    recipient_amount = random_number({"minimum": "1", "maximum": {{available_amount}}});
    print_message({"recipient_amount":{{recipient_amount}}});

    // Find recipient and construct operations
    sender_amount = 0 - {{recipient_amount}};
    recipient = find_balance({
      "not_account_identifier":[{{sender.account_identifier}}],
      "minimum_balance":{
        "value": "0",
        "currency": {{currency}}
      },
      "create_limit": 100,
      "create_probability": 50
    });
    transfer.confirmation_depth = "1";
    transfer.operations = [
      {
        "operation_identifier":{"index":0},
        "type":"ERC20_TRANSFER",
        "account":{{sender.account_identifier}},
        "amount":{
          "value":{{sender_amount}},
          "currency":{{currency}}
        }
      },
      {
        "operation_identifier":{"index":1},
        "related_operations":[{"index":0}],
        "type":"ERC20_TRANSFER",
        "account":{{recipient.account_identifier}},
        "amount":{
          "value":{{recipient_amount}},
          "currency":{{currency}}
        }
      }
    ];
  }
}
