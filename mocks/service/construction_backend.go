// Code generated by mockery v2.12.3. DO NOT EDIT.

package chain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/coinbase/rosetta-sdk-go/types"
)

// ConstructionBackend is an autogenerated mock type for the ConstructionBackend type
type ConstructionBackend struct {
	mock.Mock
}

// ConstructionCombine provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionCombine(ctx context.Context, req *types.ConstructionCombineRequest) (*types.ConstructionCombineResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ConstructionCombineResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionCombineRequest) *types.ConstructionCombineResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ConstructionCombineResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionCombineRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionDerive provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionDerive(ctx context.Context, req *types.ConstructionDeriveRequest) (*types.ConstructionDeriveResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ConstructionDeriveResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionDeriveRequest) *types.ConstructionDeriveResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ConstructionDeriveResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionDeriveRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionHash provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionHash(ctx context.Context, req *types.ConstructionHashRequest) (*types.TransactionIdentifierResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.TransactionIdentifierResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionHashRequest) *types.TransactionIdentifierResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TransactionIdentifierResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionHashRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionMetadata provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionMetadata(ctx context.Context, req *types.ConstructionMetadataRequest) (*types.ConstructionMetadataResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ConstructionMetadataResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionMetadataRequest) *types.ConstructionMetadataResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ConstructionMetadataResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionMetadataRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionParse provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionParse(ctx context.Context, req *types.ConstructionParseRequest) (*types.ConstructionParseResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ConstructionParseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionParseRequest) *types.ConstructionParseResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ConstructionParseResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionParseRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionPayloads provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionPayloads(ctx context.Context, req *types.ConstructionPayloadsRequest) (*types.ConstructionPayloadsResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ConstructionPayloadsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionPayloadsRequest) *types.ConstructionPayloadsResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ConstructionPayloadsResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionPayloadsRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionPreprocess provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionPreprocess(ctx context.Context, req *types.ConstructionPreprocessRequest) (*types.ConstructionPreprocessResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.ConstructionPreprocessResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionPreprocessRequest) *types.ConstructionPreprocessResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.ConstructionPreprocessResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionPreprocessRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ConstructionSubmit provides a mock function with given fields: ctx, req
func (_m *ConstructionBackend) ConstructionSubmit(ctx context.Context, req *types.ConstructionSubmitRequest) (*types.TransactionIdentifierResponse, *types.Error) {
	ret := _m.Called(ctx, req)

	var r0 *types.TransactionIdentifierResponse
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConstructionSubmitRequest) *types.TransactionIdentifierResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.TransactionIdentifierResponse)
		}
	}

	var r1 *types.Error
	if rf, ok := ret.Get(1).(func(context.Context, *types.ConstructionSubmitRequest) *types.Error); ok {
		r1 = rf(ctx, req)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.Error)
		}
	}

	return r0, r1
}

// ShouldHandleRequest provides a mock function with given fields: req
func (_m *ConstructionBackend) ShouldHandleRequest(req interface{}) bool {
	ret := _m.Called(req)

	var r0 bool
	if rf, ok := ret.Get(0).(func(interface{}) bool); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type NewConstructionBackendT interface {
	mock.TestingT
	Cleanup(func())
}

// NewConstructionBackend creates a new instance of ConstructionBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConstructionBackend(t NewConstructionBackendT) *ConstructionBackend {
	mock := &ConstructionBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
