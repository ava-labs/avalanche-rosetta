// Code generated by mockery v2.20.2. DO NOT EDIT.

package chain

import (
	indexer "github.com/ava-labs/avalanche-rosetta/service/backend/pchain/indexer"
	mock "github.com/stretchr/testify/mock"

	txs "github.com/ava-labs/avalanchego/vms/platformvm/txs"

	types "github.com/coinbase/rosetta-sdk-go/types"
)

// genesisHandler is an autogenerated mock type for the genesisHandler type
type genesisHandler struct {
	mock.Mock
}

// buildGenesisAllocationTx provides a mock function with given fields:
func (_m *genesisHandler) buildGenesisAllocationTx() (*txs.Tx, error) {
	ret := _m.Called()

	var r0 *txs.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*txs.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *txs.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*txs.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getFullGenesisTxs provides a mock function with given fields:
func (_m *genesisHandler) getFullGenesisTxs() ([]*txs.Tx, error) {
	ret := _m.Called()

	var r0 []*txs.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*txs.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*txs.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*txs.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getGenesisBlock provides a mock function with given fields:
func (_m *genesisHandler) getGenesisBlock() *indexer.ParsedGenesisBlock {
	ret := _m.Called()

	var r0 *indexer.ParsedGenesisBlock
	if rf, ok := ret.Get(0).(func() *indexer.ParsedGenesisBlock); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*indexer.ParsedGenesisBlock)
		}
	}

	return r0
}

// getGenesisIdentifier provides a mock function with given fields:
func (_m *genesisHandler) getGenesisIdentifier() *types.BlockIdentifier {
	ret := _m.Called()

	var r0 *types.BlockIdentifier
	if rf, ok := ret.Get(0).(func() *types.BlockIdentifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BlockIdentifier)
		}
	}

	return r0
}

// isGenesisBlockRequest provides a mock function with given fields: index, hash
func (_m *genesisHandler) isGenesisBlockRequest(index int64, hash string) (bool, error) {
	ret := _m.Called(index, hash)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (bool, error)); ok {
		return rf(index, hash)
	}
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(index, hash)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(index, hash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewGenesisHandler interface {
	mock.TestingT
	Cleanup(func())
}

// newGenesisHandler creates a new instance of genesisHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newGenesisHandler(t mockConstructorTestingTnewGenesisHandler) *genesisHandler {
	mock := &genesisHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
